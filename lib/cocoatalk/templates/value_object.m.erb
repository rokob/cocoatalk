<%= signature %>

#include "<%= name %>.h"

<% properties.each do |property| -%>
static NSString * const kCoderKey<%= snake2camel(upcase_first(property.name)) %> = @"<%= property.name %>";
<% end -%>

@implementation <%= name %>

<% properties.each_with_index do |property, idx| -%>
<% if idx == 0 -%>
- (id)initWith<%= snake2camel(upcase_first(property.name)) %>:(<%= property.type %>)<%= snake2camel(property.name) %>
<% else -%>
    <%= snake2camel(property.name) %>:(<%= property.type %>)<%= snake2camel(property.name) %>
<% end -%>
<% end -%>
{
  if ((self = [super init])) {
<% properties.each do |property| -%>
<% setter_string = property.memory == "copy" ? "[#{snake2camel(property.name)} copy]" : snake2camel(property.name) -%>
    _<%= snake2camel(property.name) %> = <%= setter_string -%>;
<% end -%>
  }
  return self;
}

+ (id)buildWithObject:(<%= name %> *)object block:(void(^)(id<<%= name %>Configuration>))block
{
  id<<%= name %>Configuration> configuration = [<%= name %>Configuration configurationWithObject:object];
  return [self buildWithConfiguration:configuration block:block];
}

+ (id)build:(void(^)(id<<%= name %>Configuration>))block
{
  id<<%= name %>Configuration> configuration = [<%= name %>Configuration defaultConfiguration];
  return [self buildWithConfiguration:configuration block:block];
}

+ (id)buildWithConfiguration:(id<<%= name %>Configuration>)configuration block:(void(^)(id<<%= name %>Configuration>))block
{
  if (block) {
    block(configuration);
  }
<% properties.each_with_index do |property, idx| -%>
<% if idx == 0 -%>
  return [[self alloc] initWith<%= snake2camel(upcase_first(property.name)) %>:configuration.<%= snake2camel(property.name) %>
<% else -%>
    <%= snake2camel(property.name) %>:configuration.<%= snake2camel(property.name) %>
<% end -%>
<% end -%>
  ];
}

#pragma mark -
#pragma mark Equality

- (BOOL)isEqual:(id)otherObj
{
  if (self == other) {
    return YES;
  }
  if (![other isKindOfClass:[self class]]) {
    return NO;
  }
  <%= name %>* other = (<%= name %>*)otherObj;
  return (<%= properties.map {|p| p.equality_string("other") }.join(" &&\n    ") %>);
}

- (NSUInteger)hash
{
  NSUInteger prime = 31;
  NSUInteger result = 1;

<% properties.each do |property| -%>
  result = prime * result + <%= property.hash_string %>;
<% end -%>

  return result;
}

#pragma mark -
#pragma mark NSCopying

- (id)copyWithZone:(NSZone *)zone
{
  return self;
}

#pragma mark -
#pragma mark NSCoding

- (id)initWithCoder:(NSCoder *)decoder
{
  if ((self = [super init])) {
<% properties.each do |property| -%>
    _<%= snake2camel(property.name) %> = [decoder decode<%= property.coder_type_string %>ForKey:kCoderKey<%= snake2camel(upcase_first(property.name)) %>];
<% end -%>
  }
  return self;
}

- (void)encodeWithCoder:(NSCoder *)coder
{
<% properties.each do |property| -%>
  [coder encode<%= property.coder_type_string %>:_<%= snake2camel(property.name) %> forKey:kCoderKey<%= snake2camel(upcase_first(property.name)) %>];
<% end -%>
}

@end

@interface <%= name %>Configuration : NSObject <<%= name %>Configuration>

+ (instancetype)defaultConfiguration;
+ (instancetype)configurationWithObject:(<%= name %>*)object;

<% properties.each do |property| -%>
@property (nonatomic, readwrite, <%= property.memory %>) <%= property.type %> <%= snake2camel(property.name) %>;
<% end -%>

@end

@implementation <%= name %>Configuration

+ (instancetype)defaultConfiguration
{
  return [[self alloc] init];
}

+ (instancetype)configurationWithObject:(<%= name %>*)object
{
  <%= name %>Configuration* config = [[self alloc] init];
<% properties.each do |property| -%>
  config.<%= snake2camel(property.name) %> = object.<%= snake2camel(property.name) %>;
<% end -%>
  return config;
}

@end
