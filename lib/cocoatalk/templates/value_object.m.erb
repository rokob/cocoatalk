<%= signature %>

#include "<%= name %>.h"

<% properties.each do |property| -%>
static NSString * const kCoderKey<%= property.name %> = @"<%= property.name %>";
<% end -%>

@implementation <%= name %>

<% properties.each_with_index do |property, idx| -%>
<% if idx == 0 -%>
- (id)initWith<%= upcase_first(property.name) %>:(<%= property.type %>)<%= property.name %>
<% else -%>
    <%= property.name %>:(<%= property.type %>)<%= property.name %>
<% end -%>
<% end -%>
{
  if ((self = [super init])) {
<% properties.each do |property| -%>
    self.<%= property.name %> = <%= property.name -%>;
<% end -%>
  }
  return self;
}

+ (id)buildWithObject:(<%= name %> *)object block:(void(^)(<%= mutableName %> *))block
{
  <%= mutableName %>* mutableObject = [[<%= mutableName %> alloc] initWithImmutableObject:object];
  if (block) {
    block(mutableObject);
  }
  return [mutableObject makeImmutable];
}

+ (id)build:(void(^)(<%= mutableName %> *))block
{
  <%= mutableName %>* mutableObject = [[<%= mutableName %> alloc] init];
  return [self buildWithObject:mutableObject block:block];
}

#pragma mark -
#pragma mark Equality

- (BOOL)isEqual:(id)otherObj
{
  if (self == other) {
    return YES;
  }
  if (![other isKindOfClass:[self class]]) {
    return NO;
  }
  <%= name %>* other = (<%= name %>*)otherObj;
  return (<%= properties.map {|p| p.equality_string("other") }.join(" &&\n    ") %>);
}

- (NSUInteger)hash
{
  NSUInteger prime = 31;
  NSUInteger result = 1;

<% properties.each do |property| -%>
  result = prime * result + <%= property.hash_string %>;
<% end -%>

  return result;
}

#pragma mark -
#pragma mark NSCopying

- (id)copyWithZone:(NSZone *)zone
{
  return self;
}

#pragma mark -
#pragma mark NSCoding

- (id)initWithCoder:(NSCoder *)decoder
{
  if ((self = [super init])) {
<% properties.each do |property| -%>
    _<%= property.name %> = [decoder decode<%= property.coder_type_string %>ForKey:kCoderKey<%= property.name %>];
<% end -%>
  }
  return self;
}

- (void)encodeWithCoder:(NSCoder *)coder
{
<% properties.each do |property| -%>
  [coder encode<%= property.coder_type_string %>:_<%= property.name %> forKey:kCoderKey<%= property.name %>];
<% end -%>
}

@end

@implementation <%= mutableName %>

- (id)initWithImmutableObject:(<%= name %> *)immutableObject
{
  if ((self = [super init])) {
<% properties.each do |property| -%>
    self.<%= property.name -%> = immutableObject.<%= property.name %>;
<% end -%>
  }
  return self;
}

- (<%= name %> *)makeImmutable;
{
  <%= name %>* object = [[<%= name %> alloc]
<% properties.each_with_index do |property, idx| -%>
<% if idx == 0 -%>
    initWith<%= upcase_first(property.name) %>:_<%= property.name -%>
  <% else -%>
    <%= property.name %>:_<%= property.name -%>
  <% end %>
<% end -%>
  ];
  return object;
}

@end
